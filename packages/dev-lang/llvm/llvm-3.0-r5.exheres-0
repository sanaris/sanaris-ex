# Copyright 2008, 2009, 2010, 2011, 2012 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2011, 2012 Aleksandar Petrinic <petrinic@gmail.com>
# Distributed under the terms of the GNU General Public License v2


require toolchain-funcs flag-o-matic easy-multibuild

SUMMARY="Low Level Virtual Machine (LLVM)"
DESCRIPTION="
Low-Level Virtual Machine (LLVM) is a compiler infrastructure designed for
compile-time, link-time, run-time, and 'idle-time' optimization of programs
from arbitrary programming languages. It currently supports compilation of C,
Objective-C, and C++ programs, using front-ends derived from GCC 4.0, GCC 4.2,
and a custom new front-end, 'clang'. It supports x86, x86_64, ia64, PowerPC,
and SPARC, with support for Alpha and ARM under development.

Some of the goals of clang include the following:
- End-User Features
  Fast compiles and low memory use
  Expressive diagnostics (examples)
  GCC compatibility
- Utility and Applications
  Modular library based architecture
  Support diverse clients (refactoring, static analysis, code generation, etc)
  Allow tight integration with IDEs
  Use the LLVM 'BSD' License
- Internal Design and Implementation
  A real-world, production quality compiler
  A simple and hackable code base
  A single unified parser for C, Objective C, C++, and Objective C++
  Conformance with C/C++/ObjC and their variants
"

HOMEPAGE="http://llvm.org/"
DOWNLOADS="
    ${HOMEPAGE}/releases/${PV}/${PNV}.tar.gz
    clang? ( ${HOMEPAGE}/releases/${PV}/clang-${PV}.tar.gz )
    dragonegg? ( ${HOMEPAGE}/releases/${PV}/dragonegg-${PV}.tar.gz  )
"

LICENCES="UoI-NCSA"
SLOT="0"

PLATFORMS="~amd64 ~x86"

CLANG_PV=clang-${PV}.src


ADMISSIBLE_GCC_VERSIONS=( 4.4.6 4.5.3 4.6.3 4.7.2 )
DRAGONEGG_COMPATIBLE_GCC_VERSIONS=( 4.5.3 4.6.3 )


MYOPTIONS="
    clang [[ description = [ Build clang, a front-end for C, C++, Objective C\
          and Objective C++ and install the clang static-analyser ] ]]
    dragonegg [[ description = [ Build a plugin that allows gcc to use\
              optimisations from the LLVM project ] ]]
    gold
    doc
    dragonegg? ( ( gcc_version: ${DRAGONEGG_COMPATIBLE_GCC_VERSIONS[*]} ) \
               [[ number-selected = exactly-one ]] )
    gcc_version: ( ${ADMISSIBLE_GCC_VERSIONS[*]} ) [[ number-selected = exactly-one ]]
    multibuild_c: 32 64
"


DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-devel/flex
        doc? (
            app-doc/doxygen
            media-gfx/graphviz
        )
    build+run:
        gold? ( sys-devel/binutils[>=2.21.51][gold(+)] )
    test:
        dev-lang/python:*
"

for GCC_VERSION in "${ADMISSIBLE_GCC_VERSIONS[@]}"; do
    DEPENDENCIES+="
        build+run: gcc_version:${GCC_VERSION}? ( sys-devel/gcc[~${GCC_VERSION}] )
    "
done


BUGS_TO="ingmar@exherbo.org dragonegg? ( petrinic@gmail.com )"

REMOTE_IDS="freecode:${PN}"

UPSTREAM_DOCUMENTATION="http://llvm.org/docs [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/releases/${PV}/docs/ReleaseNotes.html"

DEFAULT_SRC_PREPARE_PATCHES+=( "${FILES}"/llvm-3.0-fix-libLTO-link.patch )
DEFAULT_SRC_COMPILE_PARAMS=( VERBOSE=1 )

WORK=${WORKBASE}/${PNV}.src

get_gcc_version() {
    local gcc_version
    for gcc_version in "${ADMISSIBLE_GCC_VERSIONS[@]}"; do
        if option gcc_version:${gcc_version}; then
            echo ${gcc_version}
            return;
        fi
    done
    die "No gcc_version option set"
}

cxx_is_gxx() {
    [[ ${CXX} == *g++* ]] && [[ ${CXX} != *clang* ]]
}

pkg_setup() {
    if cxx_is_gxx; then
        local gxx_version=$(gxx-major-version).$(gxx-minor-version)
        if option clang && ever at_least 4.5 ${gxx_version} && ! ever at_least 4.6.2 ${gxx_version}; then
            # gcc 4.5 miscompiles clang at -O2 and above
            append-flags -O1
        fi
    fi
}

src_prepare() {
    expatch "${FILES}"/${PNV}-respect-libdir-etc.patch
    # Fix the use of dot
    edo sed -i "${WORK}"/docs/doxygen.cfg.in -e 's/@DOT@//g'
    if option clang; then
        edo mv "${WORKBASE}/${CLANG_PV:-clang-${PV}}" "${WORK}/tools/clang"

        # Fix the use of dot
        edo sed -i "${WORK}"/tools/clang/docs/doxygen.cfg.in -e 's/@DOT@//g'
        edo pushd tools/clang
        expatch "${FILES}"/0001-Replace-PROJ_prefix-lib-with-PROJ_libdir.patch

        # On top of requiring multilib, this test makes illegitimate assumptions on the version
        # of gcc and the CHOST, see also http://llvm.org/bugs/show_bug.cgi?id=11094
        edo rm -f test/Driver/linux-ld.c

        edo popd
    fi

    if option dragonegg ; then
        edo mv "${WORKBASE}/dragonegg-${PV}.src" "${WORK}/tools/dragonegg"
        # When svnversion is present(that means you have subversion installed)
        # the compilation fails because "Unversioned directory" are taken as 2
        # words, http://llvm.org/bugs/show_bug.cgi?id=11593.
        edo sed -i "s/^REVISION:=.*/REVISION:=%{version}/" "${WORK}"/tools/dragonegg/Makefile
    fi

    default
}

configure_one_multibuild() {
    econf \
        --disable-polly \
        --enable-bindings=none \
        --enable-shared \
        --enable-optimized \
        --with-cxx-include-arch="${CHOST}" \
        --with-cxx-include-root="/usr/include/c++/$(get_gcc_version)/" \
        $(option gold && echo --with-binutils-include=/usr/include) \
        $(option_enable doc doxygen)
}

src_compile() {
    easy-multibuild_src_compile
    if option dragonegg ; then
        local release_with_asserts
        local gcc_version=$(get_gcc_version)
        edo pushd "${WORK}"/tools/dragonegg

        emake LLVM_CONFIG="${WORKBASE}/${MULTIBUILD_CLASS}/${MULTIBUILD_TARGET}"/Release${release_with_asserts}/bin/llvm-config \
              GCC=/usr/bin/gcc-$( ever range 1-2 ${gcc_version} ) VERBOSE=1

        edo popd
    fi
}

test_one_multilib() {
    local lit_args="-v -j${EXJOBS:-1}"
    emake check LIT_ARGS="${lit_args}"
    option clang && emake test -C tools/clang LIT_ARGS="${lit_args}" TESTARGS=
}

install_one_multibuild() {
    emake install \
        DESTDIR="${IMAGE}" \
        KEEP_SYMBOLS=1 \
        VERBOSE=1
}

src_install() {
    easy-multibuild_src_install

    if option gold ; then
        # Make sure nm and ar find the gold plugin
        dodir /usr/${CHOST}/lib/bfd-plugins
        dosym /usr/${LIBDIR}/LLVMgold.so /usr/${CHOST}/lib/bfd-plugins
    fi

    if option dragonegg ; then
        edo pushd "${WORK}"/tools/dragonegg
        exeinto /usr/${LIBDIR}
        dolib.so dragonegg.so

        docinto dragonegg
        dodoc README
        docinto html/dragonegg
        dodoc www/*

        edo popd
    fi

    if option clang ; then
        edo pushd "${WORK}"/tools/clang/tools
        insinto /usr/share/clang-analyzer
        for f in scan-{build,view} ; do
            doins -r ${f}
            dosym /usr/share/clang-analyzer/${f}/${f} /usr/bin/${f}
        done
        edo popd
        edo pushd "${IMAGE}"/usr/share/clang-analyzer
        edo chmod a+x scan-build/{ccc-analyzer,scan-build,set-xcode-analyzer} scan-view/scan-view
        edo popd
    fi
}

pkg_postinst() {
    if option dragonegg ; then
        elog "In order to use LLVM optimisations you have to pass"
        elog "-fplugin=/usr/${LIBDIR}/dragonegg.so to gcc."
        elog "If you want to use both GCC and LLVM optimisations add this flag too:"
        elog "-fplugin-arg-dragonegg-enable-gcc-optzns."
    fi
}

